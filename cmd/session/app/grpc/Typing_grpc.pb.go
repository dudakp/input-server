// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: Typing.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TypingClient is the client API for Typing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypingClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*Session, error)
	// result session stream contains updated session state
	JoinSession(ctx context.Context, in *JoinSessionRequest, opts ...grpc.CallOption) (Typing_JoinSessionClient, error)
	// result contains finite list of sessions
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (Typing_ListSessionsClient, error)
}

type typingClient struct {
	cc grpc.ClientConnInterface
}

func NewTypingClient(cc grpc.ClientConnInterface) TypingClient {
	return &typingClient{cc}
}

func (c *typingClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/typing.Typing/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typingClient) JoinSession(ctx context.Context, in *JoinSessionRequest, opts ...grpc.CallOption) (Typing_JoinSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Typing_ServiceDesc.Streams[0], "/typing.Typing/JoinSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &typingJoinSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Typing_JoinSessionClient interface {
	Recv() (*Session, error)
	grpc.ClientStream
}

type typingJoinSessionClient struct {
	grpc.ClientStream
}

func (x *typingJoinSessionClient) Recv() (*Session, error) {
	m := new(Session)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *typingClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (Typing_ListSessionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Typing_ServiceDesc.Streams[1], "/typing.Typing/ListSessions", opts...)
	if err != nil {
		return nil, err
	}
	x := &typingListSessionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Typing_ListSessionsClient interface {
	Recv() (*Session, error)
	grpc.ClientStream
}

type typingListSessionsClient struct {
	grpc.ClientStream
}

func (x *typingListSessionsClient) Recv() (*Session, error) {
	m := new(Session)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TypingServer is the server API for Typing service.
// All implementations must embed UnimplementedTypingServer
// for forward compatibility
type TypingServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*Session, error)
	// result session stream contains updated session state
	JoinSession(*JoinSessionRequest, Typing_JoinSessionServer) error
	// result contains finite list of sessions
	ListSessions(*ListSessionsRequest, Typing_ListSessionsServer) error
	mustEmbedUnimplementedTypingServer()
}

// UnimplementedTypingServer must be embedded to have forward compatible implementations.
type UnimplementedTypingServer struct {
}

func (UnimplementedTypingServer) CreateSession(context.Context, *CreateSessionRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedTypingServer) JoinSession(*JoinSessionRequest, Typing_JoinSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinSession not implemented")
}
func (UnimplementedTypingServer) ListSessions(*ListSessionsRequest, Typing_ListSessionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedTypingServer) mustEmbedUnimplementedTypingServer() {}

// UnsafeTypingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypingServer will
// result in compilation errors.
type UnsafeTypingServer interface {
	mustEmbedUnimplementedTypingServer()
}

func RegisterTypingServer(s grpc.ServiceRegistrar, srv TypingServer) {
	s.RegisterService(&Typing_ServiceDesc, srv)
}

func _Typing_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypingServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typing.Typing/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypingServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Typing_JoinSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinSessionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TypingServer).JoinSession(m, &typingJoinSessionServer{stream})
}

type Typing_JoinSessionServer interface {
	Send(*Session) error
	grpc.ServerStream
}

type typingJoinSessionServer struct {
	grpc.ServerStream
}

func (x *typingJoinSessionServer) Send(m *Session) error {
	return x.ServerStream.SendMsg(m)
}

func _Typing_ListSessions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSessionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TypingServer).ListSessions(m, &typingListSessionsServer{stream})
}

type Typing_ListSessionsServer interface {
	Send(*Session) error
	grpc.ServerStream
}

type typingListSessionsServer struct {
	grpc.ServerStream
}

func (x *typingListSessionsServer) Send(m *Session) error {
	return x.ServerStream.SendMsg(m)
}

// Typing_ServiceDesc is the grpc.ServiceDesc for Typing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Typing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "typing.Typing",
	HandlerType: (*TypingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _Typing_CreateSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinSession",
			Handler:       _Typing_JoinSession_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSessions",
			Handler:       _Typing_ListSessions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Typing.proto",
}
